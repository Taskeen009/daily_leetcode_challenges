951. Flip Equivalent Binary Trees
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool flipEquiv(TreeNode* root1, TreeNode* root2) {
       if (root1 == nullptr && root2 == nullptr) return true;
        
        // If only one is null or their values don't match, they are not flip equivalent
        if (root1 == nullptr || root2 == nullptr || root1->val != root2->val) return false;
        
        // Check two conditions:
        // 1. The trees are flip equivalent without flipping.
        // 2. The trees are flip equivalent with flipping.
        bool noFlip = flipEquiv(root1->left, root2->left) && flipEquiv(root1->right, root2->right);
        bool flip = flipEquiv(root1->left, root2->right) && flipEquiv(root1->right, root2->left);
        
        return noFlip || flip;
        
    }
};
